#!/bin/bash

PROJECT_ROOT="$(dirname "$0")/.."
BIN_NAME='anytime-pmnk-landscapes'

##################################################

BIN_DIR="${PROJECT_ROOT}/build/release"
OUT_DIR="${PROJECT_ROOT}/out"
BIN_PATH="${BIN_DIR}/${BIN_NAME}"

PNE="0" # PLS neighborhood exploration flag default value
PAC="0" # PLS acceptance criterion flag default value

##################################################

# Script output colorization
BLUE='\033[1;34m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET_COLOR='\033[0m'

##################################################

# Display some help text for this script
function help() {
    cat <<"EOF"
A small shell script to automate the pmnk-landscapes instance testing!

Usage: ./run.sh {"INSTANCES"} {"ALGORITHMS"} {"MAXEVAL"} [OPTIONS]"

Description:

 - The files generated by this script are placed in a "out/" directory (by default) 
   located in the project root.If one does not exist the script will generate one.
 - The script uses the binary located in the "build/" (by default) directory. If such directory does 
   not exist the script will generate one and compile the source code generating the binary required 
   by this script in order to run.
 - The script will recompile the source code and generate a new binary if changes were made to the
   source code.
 - The output file format follows the following one of the following formats depending of the flags 
   and algorithms used to produce the output:
 
     1) {INSTANCE}_GSEMO_{MAXEVAL}[_SEED].dat
     2) {INSTANCE}_PLS_{MAXEVAL}_{PLS_ACCEPTANCE_CRITERION}_{PLS_NEIGHBORHOOD_CRITERION}[_SEED].dat

Positionals:

INSTANCES                                                = The path(s) for the instance(s) to be used
ALGORITHMS                                               = The heuristic(s) to be applied in in the provided instance(s)
                                                           => GSEMO
                                                           => PLS
MAXEVAL                                                  = The maximum number of evaluations performed by the heuristic(s)

Options:    
                      
-h,--help                                                = Print this help message and exit
-s,--seed UINT                                           = Seed or the pseudo random generator to be used by the heuristic(s)
-pac="0..2",--pls-acceptance-criterion="0..2"            = Use PLS algorithm acceptance criterion improvements
                                                           => (NON_DOMINATING) 0: accept every non-dominated neighbor 
                                                           => (DOMINATING) 1: accept only neighbors that dominate current solution  
                                                           => (BOTH) 2: first try to accept only neighbors that dominate the
                                                                 current solution, if none exist accept non-dominated
                                                                 solutions
-pne="0..2",--pls-neighborhood-exploration="0..2"       = Use PLS algorithm neighborhood exploration improvements
                                                           => (BEST_IMPROVEMENT) 0: explore every acceptable neighbor
                                                           => (FIRST_IMPROVEMENT) 1: stop once one neighbor is accepted
                                                           => (BOTH) 2: use (1) until PLS stops, afterwards restart and use 0
-gi=,--gsemo-improvements=                               = Still in development...
-e, --espresso                                           = Run the current script in the espresso server (Using SLURM)
EOF
}

function forward_sigint() {
    echo -e " => ${YELLOW}Interrupted !!${RESET_COLOR}"
    kill -INT "${pid}" 2>/dev/null
}

function wait_child() {
    wait "${pid}"
    trap - INT
    wait "${pid}"
}

# Select platform to run the script
function run() {
    local stdout="${*: -1}.out"
    local stderr="${*: -1}.err"
    if [ "${ESPRESSO}" ]; then
        sbatch espresso.sh "${stdout}" "${stderr}" "${BIN_PATH}" "${@:1:$#-1}"
    else
        trap forward_sigint INT
        ./"${BIN_PATH}" "${@:1:$#-1}" >"${stdout}" 2>"${stderr}" &
        local pid="$!"
        wait_child "${pid}"
    fi
}

if [[ $# -eq 0 ]]; then
    echo -e "${RED}Usage: ./run.sh {\"INSTANCES\"} {\"ALGORITHMS\"} {\"MAXEVAL\"} [OPTIONS]${RESET_COLOR}"
    echo -e "${BLUE}For more information do: ./run.sh --help ${RESET_COLOR}"
    exit 1
fi

while [[ $# -gt 0 ]]; do
    opt="$1"
    case $opt in
    -s | --seed)
        SEED="$2"
        shift
        shift
        ;;
    -pac=* | --pls-acceptance-criterion=*)
        PAC="${opt#*=}"
        shift
        ;;
    -pne=* | --pls-neighborhood-exploration=*)
        PNE="${opt#*=}"
        shift
        ;;

    -e | --espresso)
        ESPRESSO=1
        shift
        ;;
    -h | --help)
        help && exit 0
        ;;
    --* | -*)
        echo -e "${RED}Unknown option ( $opt ) ${RESET_COLOR}"
        echo -e "${BLUE}For more information run: ./run.sh --help ${RESET_COLOR}"
        exit 1
        ;;
    *)
        POSITIONAL_ARGS+=("$1")
        shift
        ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}"
if [[ $# -ne 3 ]]; then
    echo -e "${RED}Usage: ./run.sh {\"INSTANCES\"} {\"ALGORITHMS\"} {\"MAXEVAL\"} [OPTIONS]${RESET_COLOR}"
    echo -e "${BLUE}For more information do: ./run.sh --help ${RESET_COLOR}"
else

    if [ ! -d "${BIN_DIR}" ]; then
        echo -e "${BLUE}Generating build directory...${RESET_COLOR}"
        cmake -B "${BIN_DIR}" -S "${PROJECT_ROOT}" -DCMAKE_BUILD_TYPE=Release
    fi

    if [ ! -d "${OUT_DIR}" ]; then
        echo -e "${BLUE}Generating out directory...${RESET_COLOR}"
        mkdir "${OUT_DIR}"
    fi

    echo -e "${BLUE}Buiding Target...${RESET_COLOR}"
    cmake --build "${BIN_DIR}"

    echo -e "${BLUE}Running Instances...${RESET_COLOR}"

    for instance in $1; do
        for algorithm in $2; do
            for maxeval in $3; do
                out_file="${OUT_DIR}/$(basename "${instance}" .dat)_${algorithm}_${maxeval}"

                if [[ ${algorithm} == "PLS" ]]; then

                    # PLS instances
                    for acceptance_criterion in ${PAC}; do
                        for exploration_criterion in ${PNE}; do

                            if [[ "${SEED}" == "" ]]; then
                                ext="${acceptance_criterion}_${exploration_criterion}"
                                echo -e "${GREEN}Generating ${out_file}_${ext}.out ${RESET_COLOR}"

                                run "${instance}" \
                                    -m "${maxeval}" \
                                    PLS \
                                    -e "${exploration_criterion}" \
                                    -a "${acceptance_criterion}" \
                                    "${out_file}_${ext}" 

                            else
                                ext="${acceptance_criterion}_${exploration_criterion}_${SEED}"
                                echo -e "${GREEN}Generating ${out_file}_${ext}.out ${RESET_COLOR}"

                                run "${instance}" \
                                    -m "${maxeval}" \
                                    -s "${SEED}" \
                                    PLS \
                                    -e "${exploration_criterion}" \
                                    -a "${acceptance_criterion}" \
                                    "${out_file}_${ext}" 
                            fi
                        done
                    done

                else

                    # GSEMO instances
                    if [[ "${SEED}" == "" ]]; then
                        echo -e "${GREEN}Generating ${out_file}.out ${RESET_COLOR}"

                        run "${instance}" \
                            -m "${maxeval}" \
                            GSEMO \
                            "${out_file}" 

                    else
                        ext="${SEED}"
                        echo -e "${GREEN}Generating ${out_file}_${ext}.out ${RESET_COLOR}"

                        run "${instance}" \
                            -m "${maxeval}" \
                            -s "${SEED}" \
                            GSEMO \
                            "${out_file}_${ext}"
                    fi
                fi
            done
        done
    done
fi

exit 0
